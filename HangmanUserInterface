import java.io.*;


public class ComputermanUI {
    private static final String PRINT = "print";
    private static final String EXIT = "exit";
    private static final String CONNECT = "connect";
    private static final String OPEN = "open";
    private static final String SET = "set";

    private final String Spieler1;

    //private final String WoerteSpieler;
    private final BufferedReader inBufferedReader;
    private final PrintStream outStream;

    public ComputermanUI(String Spieler1, PrintStream out, InputStream in){

       //this liefert eine Referenz auf den Speicherbereich, in dem ein Objekt gespeichert ist zurück.
        this.Spieler1 = Spieler1;
        this.outStream = out;
        this.inBufferedReader = new BufferedReader(new InputStreamReader(in));

    }

    public void aufuehrungSchleife() {
        boolean again = true;

        while (again) {
            boolean rememberCommand = true;
            String cmdLineString = null;

            try {
                // read user input
                cmdLineString = inBufferedReader.readLine();

                // finish that loop if less than nothing came in
                if (cmdLineString == null) break;

                // trim whitespaces on both sides
                cmdLineString = cmdLineString.trim();

                // extract command
                int spaceIndex = cmdLineString.indexOf(' ');
                spaceIndex = spaceIndex != -1 ? spaceIndex : cmdLineString.length();

                // got command string
                String commandString = cmdLineString.substring(0, spaceIndex);

                // extract parameters string - can be empty
                String parameterString = cmdLineString.substring(spaceIndex);
                parameterString = parameterString.trim();

                // start command loop
                switch (commandString) {
                    case PRINT:
                        this.doHangman(PRINT);
                        break;
                    case CONNECT:
                        this.doHangman(CONNECT, parameterString);
                        break;
                    case OPEN:
                        this.doHangman(OPEN);
                        break;
                    case SET:
                        this.doHangman(SET, parameterString);
                        // redraw
                        break;
                    case "q": // convenience
                    case EXIT:
                        again = false;
                        System.exit(1);
                        break; // end loop

                    default:
                        this.outStream.println("unknown command:" + cmdLineString);
                        this.ausgabeMethode();
                        rememberCommand = false;
                        break;
                }
            } catch (IOException ex) {
                this.outStream.println("cannot read from input stream - fatal, give up");
                again = false;
            }
        }
    }
   public void ausgabeMethode(){
       int length = 20;
        // Stringbuilder = Erstellen ein String der eine größe Length hat
       //Stände keine Length wäre, es eine Kapazität von 16.
       StringBuilder build = new StringBuilder(length);

       //append Methode von der Klasse Stringbuilder
       // Sie wird genutzt um Sätze oder ähnliches an den String hinzuzufügen.
       build.append("\n");
       build.append("\t valid commands:");
       build.append("\n");
       build.append(CONNECT);
       build.append(".. connect as tcp client");
       build.append("\n");
       build.append(OPEN);
       build.append(".. open port become tcp server");
       build.append("\n");
       build.append(PRINT);
       build.append(".. print board");
       build.append("\n");
       build.append(SET);
       build.append(".. set a piece");
       build.append("\n");
       build.append(EXIT);
       build.append(".. exit");

       //gibt in die Adresse des Outstream den Inhalt des Strings aus
       // mit "this.Outstream" wird tatsächlich nur der Inhalt und nicht die Adresse ausgegeben
       this.outStream.println(build.toString());
   }




   //UI Methoden Implementation
   private void doHangman(String cmd) {
       this.doHangman(cmd, null);
   }

    private void doHangman(String cmd, String parameterString) {
        System.out.print("command: " + cmd);
        if(parameterString == null) {
            System.out.print("\n");
        } else {
            System.out.println("(" +  parameterString + ")");
        }
    }


   //Main Methode
   public static void main(String[] args)throws IOException {
        System.out.println("\t\t       Willkommen zu COMPUTERMÄNNCHEN");
        System.out.println("\nAnleitung:");
        System.out.println("\nSie bekommen ein beliebiges Wort gegeben, welches sie selbst \ndurch das Erraten von Buchstaben versuchen müssen zu entziffern. \nSie können es aber auch mit Wörtern versuchen. :D ");
        System.out.println("Aber aufgepasst!! Bei jeder falschen Eingabe, \nwird der unschuldige Roboter mehr zur Verdamnis gebracht! >_<");
        System.out.println("\nAlso geben Sie sich Mühe und retten sie den Roboter!!!!!");
        System.out.println("\nViel Erfolg! :)");

        /*String name = "Peter";
        System.out.println("\nWillkommen " + name);
        System.out.println("Lass uns Spielen ! ");*/

        // Deklaration und Initialisierung der Objektvariable User von der KLasse ComputermanUI
        ComputermanUI user = new ComputermanUI("Someone", System.out, System.in);

        //hier wird mit dem KOnstruktor die Methode aufgerufen
        user.ausgabeMethode();
    }

}

